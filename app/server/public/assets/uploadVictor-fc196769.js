class d{constructor(e,t,s,r,n,a){this.uploadUrl=e,this.progressBar=t,this.statusElement=s,this.callback=r,this.inputName=n,this.folder=a}attachToFileInput(e){e.addEventListener("change",t=>this.handleFileSelection(t))}handleFileSelection(e){const t=e.target.files[0];t&&(this.resetProgressBar(),this.uploadFile(t).then(s=>this.handleResponse(s)).catch(s=>this.handleError(s)))}resetProgressBar(){this.progressBar.value=0,this.statusElement.innerText="Starting upload..."}async uploadFile(e){const t=new FormData;let s=this.inputName;return t.append(s,e),new Promise((r,n)=>{const a=new XMLHttpRequest;a.upload.addEventListener("progress",o=>this.updateProgress(o)),a.addEventListener("load",()=>this.handleLoad(a,r,n)),a.addEventListener("error",()=>n("Upload failed!")),a.addEventListener("abort",()=>n("Upload canceled!"));const l=`${this.uploadUrl}?inputName=${s}&folder=${this.folder}`;a.open("POST",l,!0),a.send(t)})}updateProgress(e){if(e.lengthComputable){const t=e.loaded/e.total*100;this.progressBar.value=t,this.statusElement.innerText=`Upload progress: ${Math.round(t)}%`}}handleLoad(e,t,s){if(e.status===200){const r=JSON.parse(e.responseText);t(r)}else s(`Upload failed! Server responded with status: ${e.status}`)}handleResponse(e){this.statusElement.innerText=`Upload complete! Server response: ${e.message}`,this.callback&&this.callback(e)}handleError(e){this.statusElement.innerText=`Error: ${e}`}}export{d as F};
